# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rxzFxtlAlUv1wli1KVFTa6qJmb-RHJls
"""

import numpy as np
import base64
import io


def affine_encrypt(text, a, b):
    result = ''
    for char in text:
        if char.isalpha():
            if char.isupper():
                result += chr(((a * (ord(char) - 65) + b) % 26) + 65)
            else:
                result += chr(((a * (ord(char) - 97) + b) % 26) + 97)
        else:
            result += char
    return result

def affine_decrypt(cipher, a, b):
    result = ''
    mod_inv = pow(a, -1, 26)
    for char in cipher:
        if char.isalpha():
            if char.isupper():
                result += chr(((mod_inv * (ord(char) - 65 - b)) % 26) + 65)
            else:
                result += chr(((mod_inv * (ord(char) - 97 - b)) % 26) + 97)
        else:
            result += char
    return result

def atbash_encrypt_decrypt(text):
    result = ''
    for char in text:
        if char.isalpha():
            if char.isupper():
                result += chr(90 - (ord(char) - 65))
            else:
                result += chr(122 - (ord(char) - 97))
        else:
            result += char
    return result

baconian_dict = {
    'A': 'AAAAA', 'B': 'AAAAB', 'C': 'AAABA', 'D': 'AAABB', 'E': 'AABAA',
    'F': 'AABAB', 'G': 'AABBA', 'H': 'AABBB', 'I': 'ABAAA', 'J': 'ABAAB',
    'K': 'ABABA', 'L': 'ABABB', 'M': 'ABBAA', 'N': 'ABBAB', 'O': 'ABBBA',
    'P': 'ABBBB', 'Q': 'BAAAA', 'R': 'BAAAB', 'S': 'BAABA', 'T': 'BAABB',
    'U': 'BABAA', 'V': 'BABAB', 'W': 'BABBA', 'X': 'BABBB', 'Y': 'BBAAA',
    'Z': 'BBAAB'
}
reverse_baconian_dict = {v: k for k, v in baconian_dict.items()}

def baconian_encrypt(text):
    return ' '.join(baconian_dict[char] for char in text.upper() if char in baconian_dict)

def baconian_decrypt(cipher):
    words = cipher.split(' ')
    return ''.join(reverse_baconian_dict[word] for word in words if word in reverse_baconian_dict)

def base64_encrypt(text):
    text_bytes = text.encode('utf-8')
    base64_bytes = base64.b64encode(text_bytes)
    return base64_bytes.decode('utf-8')

def base64_decrypt(cipher):
    base64_bytes = cipher.encode('utf-8')
    text_bytes = base64.b64decode(base64_bytes)
    return text_bytes.decode('utf-8')

def bifid_encrypt(text, key):
    text = text.upper().replace('J', 'I')
    key_matrix = np.array([char for char in key.upper().replace('J', 'I')]).reshape(5, 5)
    coords = [(np.where(key_matrix == char)[0][0], np.where(key_matrix == char)[1][0]) for char in text if char in key_matrix]

    rows, cols = zip(*coords)
    combined = rows + cols
    cipher = ''.join([key_matrix[combined[i], combined[i + len(rows)]] for i in range(len(rows))])
    return cipher

def bifid_decrypt(cipher, key):
    key_matrix = np.array([char for char in key.upper().replace('J', 'I')]).reshape(5, 5)
    coords = [(np.where(key_matrix == char)[0][0], np.where(key_matrix == char)[1][0]) for char in cipher if char in key_matrix]

    mid = len(coords) // 2
    rows = [coord[0] for coord in coords[:mid]]
    cols = [coord[1] for coord in coords[mid:]]

    plain = ''.join([key_matrix[rows[i], cols[i]] for i in range(len(rows))])
    return plain

def display_menu():
    print("Select a cipher:")
    print("1: Affine Cipher")
    print("2: Atbash Cipher")
    print("3: Baconian Cipher")
    print("4: Base64")
    print("5: Bifid Cipher")

def upload_file():
    uploaded = files.upload()
    for filename in uploaded.keys():
        return filename, uploaded[filename]

def main():
    display_menu()
    choice = input("Enter the number of your choice: ")

    if choice == '1':
        # Affine Cipher
        file_name, file_content = upload_file()
        a = int(input("Enter the value of a: "))
        b = int(input("Enter the value of b: "))
        mode = input("Encrypt or Decrypt (e/d): ").lower()
        if mode == 'e':
            encrypted_text = affine_encrypt(file_content.decode("utf-8"), a, b)
            output_file_name = input("Enter the file name to save the encrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(encrypted_text)
                print("Encrypted text saved to", output_file_name)
        else:
            decrypted_text = affine_decrypt(file_content.decode("utf-8"), a, b)
            output_file_name = input("Enter the file name to save the decrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(decrypted_text)
                print("Decrypted text saved to", output_file_name)

    elif choice == '2':
        # Atbash Cipher
        file_name, file_content = upload_file()
        mode = input("Encrypt or Decrypt (e/d): ").lower()
        if mode == 'e':
            encrypted_text = atbash_encrypt_decrypt(file_content.decode("utf-8"))
            output_file_name = input("Enter the file name to save the encrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(encrypted_text)
                print("Encrypted text saved to", output_file_name)
        else:
            decrypted_text = atbash_encrypt_decrypt(file_content.decode("utf-8"))
            output_file_name = input("Enter the file name to save the decrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(decrypted_text)
                print("Decrypted text saved to", output_file_name)

    elif choice == '3':
        # Baconian Cipher
        file_name, file_content = upload_file()
        mode = input("Encrypt or Decrypt (e/d): ").lower()
        if mode == 'e':
            encrypted_text = baconian_encrypt(file_content.decode("utf-8"))

            output_file_name = input("Enter the file name to save the encrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(encrypted_text)
                print("Encrypted text saved to", output_file_name)
        else:
            decrypted_text = baconian_decrypt(file_content.decode("utf-8"))
            output_file_name = input("Enter the file name to save the decrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(decrypted_text)
                print("Decrypted text saved to", output_file_name)

    elif choice == '4':
        # Base64
        file_name, file_content = upload_file()
        mode = input("Encrypt or Decrypt (e/d): ").lower()
        if mode == 'e':
            encrypted_text = base64_encrypt(file_content.decode("utf-8"))
            output_file_name = input("Enter the file name to save the encrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(encrypted_text)
                print("Encrypted text saved to", output_file_name)
        else:
            decrypted_text = base64_decrypt(file_content.decode("utf-8"))
            output_file_name = input("Enter the file name to save the decrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(decrypted_text)
                print("Decrypted text saved to", output_file_name)

    elif choice == '5':
        # Bifid Cipher
        file_name, file_content = upload_file()
        key = input("Enter the key (25 characters): ")
        mode = input("Encrypt or Decrypt (e/d): ").lower()
        if mode == 'e':
            encrypted_text = bifid_encrypt(file_content.decode("utf-8"), key)
            output_file_name = input("Enter the file name to save the encrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(encrypted_text)
                print("Encrypted text saved to", output_file_name)
        else:
            decrypted_text = bifid_decrypt(file_content.decode("utf-8"), key)
            output_file_name = input("Enter the file name to save the decrypted text: ")
            with open(output_file_name, "w") as file:
                file.write(decrypted_text)
                print("Decrypted text saved to", output_file_name)

    else:
        print("Invalid choice")

if __name__ == "__main__":
    main()



